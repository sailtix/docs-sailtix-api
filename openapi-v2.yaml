openapi: 3.0.3
info:
  title: Sailtix API v2
  description: |
    # Sailtix Maritime Ticketing Platform API v2
    
    Comprehensive API for maritime ticketing, booking, and payment processing.
    
    ## Features
    - Maritime ticketing and route pricing
    - Multi-payment gateway support (Xendit, Stripe)
    - Order management and booking lifecycle
    - JWT-based authentication with Google OAuth
    - File uploads and storage
    - Real-time webhooks
    
    ## Authentication
    Include JWT token in Authorization header:
    ```
    Authorization: Bearer <your-jwt-token>
    ```
  version: 2.0.0
  contact:
    name: Sailtix API Support
    email: api-support@sailtix.com
    url: https://sailtix.com

servers:
  - url: https://api.sailtix.com
    description: Production server
  - url: http://localhost:8080
    description: Development server

tags:
  - name: Authentication
    description: User authentication and authorization
  - name: Orders
    description: Order management and booking operations
  - name: Payments
    description: Payment processing and gateway integrations
  - name: Route Pricing
    description: Route pricing and search functionality
  - name: File Uploads
    description: File and image upload operations

paths:
  /landing/auth/check-email:
    post:
      tags:
        - Authentication
      summary: Check if email exists
      description: Check if an email address is already registered in the system
      operationId: checkEmail
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthLandingCheckEmailRequest'
      responses:
        '200':
          description: Email check result
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /landing/auth/login:
    post:
      tags:
        - Authentication
      summary: User login
      description: Authenticate user with email and password
      operationId: loginUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthLandingLoginEmailRequest'
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /landing/route-pricings/search:
    post:
      tags:
        - Route Pricing
      summary: Search route pricing
      description: Search for available routes and pricing based on criteria
      operationId: searchRoutePricing
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RoutePricingLandingSearchRequest'
      responses:
        '200':
          description: Search results
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /landing/orders:
    post:
      tags:
        - Orders
      summary: Create order
      description: Create a new booking order
      operationId: createOrder
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrderCreateRequest'
      responses:
        '200':
          description: Order created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /landing/orders/{id}:
    get:
      tags:
        - Orders
      summary: Get order by ID
      description: Retrieve order details by order ID
      operationId: getOrder
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: Order ID
      responses:
        '200':
          description: Order details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Order not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /landing/payments:
    post:
      tags:
        - Payments
      summary: Create payment request
      description: Create a payment request for an order
      operationId: createPayment
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PaymentLandingCreateOrderPaymentRequest'
      responses:
        '200':
          description: Payment request created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /dash/uploads/image:
    post:
      tags:
        - File Uploads
      summary: Upload image
      description: Upload an image file
      operationId: uploadImage
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
                  description: Image file to upload
                folder:
                  type: string
                  description: Target folder for upload
                  default: "images"
      responses:
        '200':
          description: Image uploaded successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
        '400':
          description: Invalid file
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: JWT token for authentication

  schemas:
    Response:
      type: object
      properties:
        data:
          description: Response data
          type: object
        message:
          description: Response message
          type: string
        success:
          description: Success status
          type: boolean
          example: true

    ErrorResponse:
      type: object
      properties:
        error:
          type: object
          properties:
            code:
              type: string
              description: Error code
            message:
              type: string
              description: Error message
            details:
              type: object
              description: Additional error details
        success:
          type: boolean
          example: false

    AuthLandingCheckEmailRequest:
      type: object
      required:
        - email
      properties:
        email:
          type: string
          format: email
          maxLength: 100
          description: Email address to check
          example: "user@example.com"

    AuthLandingLoginEmailRequest:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
          maxLength: 100
          description: Email address
          example: "user@example.com"
        password:
          type: string
          description: Password
          example: "securepassword123"

    RoutePricingLandingSearchRequest:
      type: object
      required:
        - departure_date
        - adult
        - child
        - infant
      properties:
        departure_dock_id:
          type: string
          format: uuid
          description: Departure dock ID
          example: "123e4567-e89b-12d3-a456-426614174000"
        arrival_dock_id:
          type: string
          format: uuid
          description: Arrival dock ID
          example: "123e4567-e89b-12d3-a456-426614174001"
        departure_date:
          type: string
          format: date
          description: Departure date (YYYY-MM-DD)
          example: "2024-12-25"
        adult:
          type: integer
          minimum: 0
          description: Number of adult passengers
          example: 2
        child:
          type: integer
          minimum: 0
          description: Number of child passengers
          example: 1
        infant:
          type: integer
          minimum: 0
          description: Number of infant passengers
          example: 0
        page:
          type: integer
          minimum: 1
          default: 1
          description: Page number
          example: 1
        limit:
          type: integer
          minimum: 1
          maximum: 100
          default: 20
          description: Items per page
          example: 20

    OrderCreateRequest:
      type: object
      required:
        - route_pricing_id
        - departure_date
        - adult_count
        - child_count
        - infant_count
        - passenger_details
      properties:
        route_pricing_id:
          type: string
          format: uuid
          description: Route pricing ID
          example: "123e4567-e89b-12d3-a456-426614174000"
        departure_date:
          type: string
          format: date
          description: Departure date
          example: "2024-12-25"
        adult_count:
          type: integer
          minimum: 0
          description: Number of adult passengers
          example: 2
        child_count:
          type: integer
          minimum: 0
          description: Number of child passengers
          example: 1
        infant_count:
          type: integer
          minimum: 0
          description: Number of infant passengers
          example: 0
        passenger_details:
          type: array
          items:
            $ref: '#/components/schemas/PassengerDetail'
          description: Passenger details
        contact_info:
          $ref: '#/components/schemas/ContactInfo'

    PassengerDetail:
      type: object
      required:
        - type
        - first_name
        - last_name
        - id_type
        - id_number
      properties:
        type:
          type: string
          enum: [ADULT, CHILD, INFANT]
          description: Passenger type
          example: "ADULT"
        first_name:
          type: string
          description: First name
          example: "John"
        last_name:
          type: string
          description: Last name
          example: "Doe"
        id_type:
          type: string
          enum: [KTP, PASSPORT, DRIVING_LICENSE, BIRTH_CERTIFICATE]
          description: ID document type
          example: "KTP"
        id_number:
          type: string
          description: ID document number
          example: "1234567890123456"

    ContactInfo:
      type: object
      required:
        - email
        - phone_number
      properties:
        email:
          type: string
          format: email
          description: Contact email
          example: "user@example.com"
        phone_number:
          type: string
          description: Contact phone number
          example: "+6281234567890"

    PaymentLandingCreateOrderPaymentRequest:
      type: object
      required:
        - order_id
      properties:
        order_id:
          type: string
          format: uuid
          description: Order ID
          example: "123e4567-e89b-12d3-a456-426614174000"
        payment_method:
          type: string
          enum: [QR_CODE, VIRTUAL_ACCOUNT, CARD]
          description: Payment method
          example: "VIRTUAL_ACCOUNT"
        payment_channel:
          type: string
          description: Payment channel
          example: "BCA" 