openapi: 3.0.3
info:
  title: SailTix REST API
  description: >
    Comprehensive API documentation for SailTix backend services, enabling seamless integration and utilization.
  version: 1.0.0
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
servers:
  - url: https://api.sailtix.com/v1
    description: Production server - Stable API for all end-users.
security:
  - BearerAuth: []
paths:
  /hello:
    get:
      summary: Say Hello
      description: >
        Returns a friendly greeting message to confirm API connectivity and functionality.
      operationId: sayHello
      responses:
        '200':
          description: Successful response with a greeting message.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Hello, World!"
        '400':
          description: Bad Request due to invalid parameters.
  /users:
    get:
      summary: Retrieve Users
      description: >
        Returns a comprehensive list of all registered users in the system, including their details.
      operationId: getUsers
      responses:
        '200':
          description: A list of user objects successfully retrieved.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '400':
          description: Bad Request due to invalid query parameters.
    post:
      summary: Create User
      description: >
        Creates a new user account with the provided user details, ensuring all required fields are valid.
      operationId: createUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserInput'
      responses:
        '201':
          description: User created successfully with the provided details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Bad Request due to invalid input data.
  /users/{id}:
    get:
      summary: Get User by ID
      description: >
        Retrieves detailed information of a user based on their unique identifier, ensuring the user exists.
      operationId: getUserById
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: The unique identifier of the user to retrieve.
      responses:
        '200':
          description: A user object successfully retrieved.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Bad Request due to invalid user ID format.
        '404':
          description: User not found with the provided ID.
    put:
      summary: Update User
      description: >
        Updates the details of an existing user with the provided information, ensuring data integrity.
      operationId: updateUser
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: The unique identifier of the user to update.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserInput'
      responses:
        '200':
          description: User updated successfully with the new details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Bad Request due to invalid input data.
        '404':
          description: User not found with the provided ID.
components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    User:
      type: object
      properties:
        id:
          type: string
          description: Unique identifier for the user.
        name:
          type: string
          description: Full name of the user.
        email:
          type: string
          description: Email address of the user.
        createdAt:
          type: string
          format: date-time
          description: Timestamp when the user was created.
      required:
        - id
        - name
        - email
    UserInput:
      type: object
      properties:
        name:
          type: string
          description: Full name of the user.
        email:
          type: string
          description: Email address of the user.
        password:
          type: string
          description: Password for the user account.
      required:
        - name
        - email
        - password
    LoginInput:
      type: object
      properties:
        email:
          type: string
          description: Registered email address.
        password:
          type: string
          description: Password for the account.
      required:
        - email
        - password
